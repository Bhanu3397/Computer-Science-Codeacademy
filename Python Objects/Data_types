Types:-Python equips us with many different ways to store data. We can check the type of a Python variable using the type() function

Class:-A class is a template for a data type. It describes the kinds of information that class will hold and how a programmer will interact with that data.
class CoolClass:
  pass
We used the pass keyword in Python to indicate that the body of the class was intentionally left blank so we don’t cause an IndentationError

Instantiation:-A class doesn’t accomplish anything simply by being defined. A class must be instantiated. In other words, we must create an instance of the class, in order to breathe life into the schematic.
Instantiation takes a class and turns it into an object

Object-Oriented Programming:-A class instance is also called an object. The pattern of defining classes and creating objects to represent the responsibilities of a program is known as Object Oriented Programming or OOP.
In Python __main__ means “this current file that we’re running”

Class Variables:-When we want the same data to be available to every instance of a class we use a class variable. A class variable is a variable that’s the same for every instance of the class.
You can define a class variable by including it in the indented part of your class definition, and you can access all of an object’s class variables with object.variable syntax.

Methods:-Methods are functions that are defined as part of a class. The first argument in a method is always the object that is calling the method.Convention recommends that we name this first argument self. Methods always have at least this one argument.

Methods with Arguments:-Methods can also take more arguments than just self

Constructors:-There are several methods that we can define in a Python class that have special behavior. These methods are sometimes called “magic”, because they behave differently from regular methods. Another popular term is dunder methods, so-named because they have two underscores (double-underscore abbreviated to “dunder”) on either side of them.

Methods that are used to prepare an object being instantiated are called constructors. 

Instance Variables:-
class Store:
  pass
alternative_rocks = Store()
isabelles_ices = Store()
alternative_rocks.store_name = "Alternative Rocks"
isabelles_ices.store_name = "Isabelle's Ices"

Attribute Functions:-Instance variables and class variables are both accessed similarly in Python. This is no mistake, they are both considered attributes of an object.
hasattr(object, “attribute”) has two parameters:
object : the object we are testing to see if it has a certain attribute
attribute : name of attribute we want to see if it exists

getattr(object, “attribute”, default) has three parameters (one of which is optional):
object : the object whose attribute we want to evaluate
attribute : name of attribute we want to evaluate
default : the value that is returned if the attribute does not exist (note: this parameter is optional)

Self:-